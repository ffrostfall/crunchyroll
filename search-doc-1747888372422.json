{"searchDocs":[{"title":"Rig","type":0,"sectionRef":"#","url":"/crunchyroll/api/Rig","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Rig","url":"/crunchyroll/api/Rig#properties","content":" ","version":null,"tagName":"h2"},{"title":"result_coordinate_frames​","type":1,"pageTitle":"Rig","url":"/crunchyroll/api/Rig#result_coordinate_frames","content":"&lt;/&gt; Rig.result_coordinate_frames: {[string]: CFrame } The result table of the rig. Structured as { [limb name]: CFrame } ","version":null,"tagName":"h3"},{"title":"AnimationAsset","type":0,"sectionRef":"#","url":"/crunchyroll/api/AnimationAsset","content":"AnimationAsset An animation asset. This stores the animation length, and the keyframes.","keywords":"","version":null},{"title":"Crunchyroll","type":0,"sectionRef":"#","url":"/crunchyroll/api/Crunchyroll","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#types","content":" ","version":null,"tagName":"h2"},{"title":"AnimationTrack​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#AnimationTrack","content":"&lt;/&gt; interface AnimationTrack { stop_fade_time: number start_fade_time: number weight: number alpha: number priority: number } This table describes the state of an animation. It is agnostic to the animation asset.  ","version":null,"tagName":"h3"},{"title":"Limb​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#Limb","content":"&lt;/&gt; interface Limb { name: string c0: CFrame c1: CFrame depends_on: string } This is the Crunchyroll equivalent of a Roblox Motor6D.depends_on is how the hierarchy works; for example &quot;Head&quot; depends on &quot;Torso&quot; ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#functions","content":" ","version":null,"tagName":"h2"},{"title":"load_keyframe_sequence​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#load_keyframe_sequence","content":"&lt;/&gt; Crunchyroll.load_keyframe_sequence(keyframe_sequence: KeyframeSequence ) → AnimationAsset Load a keyframe sequence from Roblox. This will return an AnimationAsset.  ","version":null,"tagName":"h3"},{"title":"create_rig​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#create_rig","content":"&lt;/&gt; Crunchyroll.create_rig(rig_hierarchy: Limb) → Rig Create a rig from a model. This will return a Rig.  ","version":null,"tagName":"h3"},{"title":"solve_animation​","type":1,"pageTitle":"Crunchyroll","url":"/crunchyroll/api/Crunchyroll#solve_animation","content":"&lt;/&gt; Crunchyroll.solve_animation( rig: Rig, tracks: {[AnimationAsset]: AnimationTrack}, root: CFrame ) → () The primary function of the module. This will solve the animation for a rig. Example: crunchyroll.solve_animation(rig, { [animation] = { priority = 1, start_fade_time = 0, stop_fade_time = 0, weight = 1, alpha = 0.5, }, }, character.HumanoidRootPart.CFrame)  ","version":null,"tagName":"h3"},{"title":"Animation Assets","type":0,"sectionRef":"#","url":"/crunchyroll/docs/animation_assets","content":"Animation Assets Animation assets in Crunchyroll are the equivalent of Animation instances in Roblox. They are not involved when it comes to playing an animation, they are involved in loading the asset &amp; storing data. It is important to note, however, that you need KeyframeSequences, not Animations. This is because Crunchyroll parses keyframe sequences. There may be additional support for processing animation instances too, but that is not the case right now. You can load a keyframe sequence into a Crunchyroll animation like so: local crunchyroll = require(path.to.crunchyroll) local keyframe_sequence = ReplicatedStorage.assets.walking_keyframe_sequence crunchyroll.load_keyframe_sequence(keyframe_sequence) ","keywords":"","version":"Next"},{"title":"Intro","type":0,"sectionRef":"#","url":"/crunchyroll/docs/intro","content":"Intro Crunchyroll is a dedicated library for calculating coordinates frames of a rig from an array of animation tracks. You can define a rig by calling crunchyroll.create_rig, which is a representation of Roblox Motor6Ds. You can then pass this rig into crunchyroll.solve_animation, which also takes animation tracks. These are tables which are similar to Roblox's AnimationTracks. Similar to AnimationTracks, you need an animation &quot;asset&quot;. You can load a Roblox animation by calling crunchyroll.load_keyframe_sequence. Crunchyroll will then give you the coordinate frames of the &quot;limbs&quot; (think Torso, Head, &quot;Left Leg&quot;, UpperTorso etc.), and that's it! Why use this? If you don't intend on using Crunchyroll to write your own animation player: No instances! You can calculate how an animation looks at any given time without affecting your game in any way. This means you could implement things like proper ping compensation and secure hit detection (secure headshot detection!)Allows for extremely convenient still shots of charactersGreat for characters in viewport frames! Animations If you do write your own animation player: Numerical priorities! No more Action1, Action2, Action3.No more :LoadAnimation() or any asset ID management.Immediate stops! No more forced 0.05s fade time.Very fast and performant :3potential for things like easy animation skipping!remove the physics from animations, makes it significantly easier to write your own animation replication! Future support Eventually, I may consider making a custom animation format which supports things like sinusoidal easing, additive blending, and other features. I do not know how popular this would be though so I am not sure I will implement these right now. Example local rig = require(...) -- Path to a Crunchyroll R6 rig local crunchyroll = require(...) -- Path to Crunchyroll local crunchyroll_animation = crunchyroll.load_keyframe_sequence(ReplicatedStorage.assets.TestAnimation) crunchyroll_animation.solve_animation(rig, { [crunchyroll_animation] = { stop_fade_time = 0.25, -- 0.25 seconds start_fade_time = 0.25, weight = 1, -- Supports blending! priority = 1, -- Supports numerical priorities! alpha = 0.5 -- Halfway through the animation } }) -- placed into a result table for optimal performance local left_arm_cframe = rig.result_coordinate_frames[&quot;Left Arm&quot;] ","keywords":"","version":"Next"},{"title":"Rigs","type":0,"sectionRef":"#","url":"/crunchyroll/docs/rigs","content":"","keywords":"","version":"Next"},{"title":"Easy R6 rig​","type":1,"pageTitle":"Rigs","url":"/crunchyroll/docs/rigs#easy-r6-rig","content":" return crunchyroll.create_rig({ name = &quot;Torso&quot;, c0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0), c1 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0), children = { { name = &quot;Head&quot;, c0 = CFrame.new(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0), c1 = CFrame.new(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0), }, { name = &quot;Left Leg&quot;, c0 = CFrame.new(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0), c1 = CFrame.new(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0), }, { name = &quot;Right Leg&quot;, c0 = CFrame.new(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0), c1 = CFrame.new(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0), }, { name = &quot;Left Arm&quot;, c0 = CFrame.new(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0), c1 = CFrame.new(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0), }, { name = &quot;Right Arm&quot;, c0 = CFrame.new(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0), c1 = CFrame.new(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0), }, }, })  ","version":"Next","tagName":"h2"},{"title":"Animation Tracks","type":0,"sectionRef":"#","url":"/crunchyroll/docs/animation_tracks","content":"","keywords":"","version":"Next"},{"title":"Details​","type":1,"pageTitle":"Animation Tracks","url":"/crunchyroll/docs/animation_tracks#details","content":" The &quot;weight&quot; field is the track's contribution to the weighted average which will decide the final coordinate frames of the animation.  The alpha is the &quot;percent complete&quot; of the animation. It is a number between 0 and 1.  ","version":"Next","tagName":"h2"},{"title":"Stop & Start Fade Time​","type":1,"pageTitle":"Animation Tracks","url":"/crunchyroll/docs/animation_tracks#stop--start-fade-time","content":" You can see the math for stop fade time &amp; start fade time here. The end &quot;influence&quot; which fade time has is done by multiplying the weight of the track by a modifier between 0 and 1. ","version":"Next","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/crunchyroll/docs/installation","content":"Installation You can get Crunchyroll on Wally, or you can get Crunchyroll via rbxm on the latest GitHub release. [dependencies] crunchyroll = &quot;ffrostfall/crunchyroll@latest&quot; ","keywords":"","version":"Next"}],"options":{"id":"default"}}